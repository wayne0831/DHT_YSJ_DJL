kfold.flex <- function(iteration){
  # number of cross validation
  k       <- 5
  
  # fix the seed so that each model train and test the same data
  set.seed(s) 
  
  # each data has its own id(1 to 5) to process k fold cross validation 
  data$id <- sample(1:k, nrow(data), replace = TRUE)
  
  list    <- 1:k
  
  # data frame reset
  prediction_flex <- testset_copy_flex <- data.frame()
  
  #function for k fold
  for(i in 1:k){
    # remove rows with id i from dataframe to create training set
    trainset     <- subset(data, id %in% list[-i])
    testset      <- subset(data, id %in% c(i))
    
    #run a adaboost model
    model_flex             <- flexboost(trainset[, independent], trainset[, dependent], n_rounds = iteration)  
    
    # predict
    temp_flex              <- as.data.frame(predict(model_flex, testset))
    
    # append this iteration's prediction to the end of the prediction data frame
    prediction_flex        <- rbind(prediction_flex, temp_flex)
    
    # append this iteration's test set to the testset copy data frame
    testset_copy_flex      <- rbind(testset_copy_flex, as.data.frame(testset[, dependent]))
    
    # result
    result_flex            <- cbind(prediction_flex, testset_copy_flex[, 1])
    
    # confustion matrix and accuracy
    names(result_flex)     <- c("Actual", "Predicted")
    confusion_matrix_flex  <- table(result_flex$Actual, result_flex$Predicted )
    accuracy_flex          <- sum(diag(confusion_matrix_flex)) / sum(confusion_matrix_flex)
    result_flex            <- list("confusion_matrix_flex " = confusion_matrix_flex, 
                                   "accuracy_flex"          = accuracy_flex)
    
  }  
  acc_flex <<- (result_flex$accuracy_flex)
  
  return (acc_flex)
}
