library(randomForest)

# set work directory
setwd("C:\\Users\\Wayne\\Desktop\\Dataset")

# load the dataset
data          <- read.csv('ilpd.csv', TRUE)

# seed
s             <- 1

# feature location of idependent and dependent variables
independent   <- 1:9
dependent     <- 10

# divide the dataset into input features and output feature
X             <- data[, independent]
y             <- data[, dependent]
y             <- as.factor(y)

# basic adaboost k-fold cross validation
# tt : number of rounds
kfold_basic <- function(tt){
  # number of cross validation
  k       <- 5
  
  # fix the seed so that each model train and test the same data
  set.seed(s) 
  
  # each data has its own id(1 to 5) to process k fold cross validation 
  data$id <- sample(1:k, nrow(data), replace = TRUE)
  
  list    <- 1:k
  
  # data frame reset
  prediction_bm <- testset_copy_bm <- data.frame()
  
  #function for k fold
  for(i in 1:k){
    
    # remove rows with id i from dataframe to create training set
    trainset     <- subset(data, id %in% list[-i])
    
    # select rows with id i to create test set
    testset      <- subset(data, id %in% c(i))
    
    #run a adaboost model
    model_bm        <- randomForest(trainset[, independent], 
                                    as.factor(trainset[, dependent]), 
                                    ntree = tt)
    
    temp_bm         <- as.data.frame(predict(model_bm, testset))
    
    # append this iteration's prediction to the end of the prediction data frame
    prediction_bm   <- rbind(prediction_bm, temp_bm)
    
    # append this iteration's test set to the testset copy data frame
    testset_copy_bm <- rbind(testset_copy_bm, as.data.frame(testset[, dependent]))
    
    
    # add predictions and actual Sepal Length values
    result_bm            <- cbind(prediction_bm, testset_copy_bm[, 1])
    
    names(result_bm)     <- c("Actual", "Predicted")
    
    confusion_matrix_bm  <- table(result_bm$Actual, result_bm$Predicted )
    
    accuracy_bm          <- sum(diag(confusion_matrix_bm)) / sum(confusion_matrix_bm)
    
    result_bm            <- list("confusion_matrix_bm " = confusion_matrix_bm, 
                                 "accuracy_bm"          = accuracy_bm)
    
  }  
  
  temp1 <<- (result_bm$accuracy_bm)
  
  return(temp1)
}

tt<- list()

for (i in 1:100){
  print(kfold_basic(i))
  tt <<- append(tt, kfold_basic(i), after = length(tt))
  
}

print(mean(unlist(tt)))
